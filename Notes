Features:
Full stack:
FrontEnd:
React Native, Expo, Expo Router, Expo SDK 50,
Backend:
MongoDB Atlas, GraphQL, IBM Stepzen(scalable GraphQL), GraphQL API, API Ninjas(exercises), Custom MongoDB Database
Uses MongoDB to store hundreds of built in exercises with instructions
also stores our workouts and charts our progressSean with progress graphs
Exercise Database has search filter and view functionality
Logs our exercise sets while working out in da gym (react native=any platform, can use in browser because apples walled garden doesn't allow sideloading)
I like that we don't save data locally, have a database that we can access from any device and see progress
we can add features after tut, custom exercises, cardio log, step counter, plans, calorie/macros tracker, etc - need MVP to git a job and escape canada

npx create-expo-app@latest Workouts -t blank #will create an app in our current directory with latest expo
npm start #will run 'expo start', MetroBundler will give us a QR code, and Metro waiting on exp://192.168.2.16:8081
we can scan the code on Android or iOS to see our app, will need to download 'Expo Go' on iOS
Had troubles creating an account / signing into Expo Go,
npx expo install react-native-web react-dom @expo/metro-runtime #installs expos web dependancies, can run expo code in browser
Web is waiting on http://localhost:8081 #we can now write our code and debug in the browser, instead of using mobile device
We can also use simulators, iOS can only be used with XCode(iOS)
downloaded anbox, so we can test our mobile features on a simulator,
sudo add-apt-repository multiverse
sudo apt update
sudo apt install anbox #running these 3 commands will install anbox, a sim for ubuntu
Apparently, above doesn't work, need more:
https://reactnative.dev/docs/next/environment-setup?guide=native&platform=android#android-sdk
https://developer.android.com/studio
tar -xvf android-studio-2023.2.1.25-linux.tar.gz #installs executable downloaded from official site
cd android-studio/bin
./studio.sh #will open android studio installer, will need to add PATH, to fix below error
Failed to resolve the Android SDK path. Default install location not found: /home/sean/Android/sdk. Use ANDROID_HOME to set the Android SDK location.
Add the following lines to your $HOME/.bash_profile or $HOME/.bashrc (if you are using zsh then ~/.zprofile or ~/.zshrc) config file:
export ANDROID_HOME=$HOME/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools
Go to HOME Press 'Ctrl+H' shows hidden files, add above change 'Sdk' to 'sdk' and it works, now need to set up a virtual phone to sim
Error: Can't find the device we installed pixel(something)
https://docs.expo.dev/workflow/android-studio-emulator/
https://developer.android.com/studio/run/device.html#developer-device-options
Fix: You need to first open the device in Android Studio, Then load it through expo/npm start, finally we can get to work.
Will need to download the expo go app on your virtual device before you can start debugging
Finally, we got our app to open on the simphone, only took 3?ish hours, better than flutter(3 days), time to work.
'r' press R to reload the app
'c' press C to clear the console
It should also refresh on save
To run simphone go into 'android-studio'/bin and open a terminal run './studio.sh' to open again

First we need to add some dummy data for exercises, 'exercises.json' it's an array, every item in it is an object with multiple { key: value } pairs
{} called portals to access JS variables use curly braces {exercise.name} #to get the exercise name and display it as an expression
<Text style={{ fontSize: 24, fontWeight: 'bold'}}>{exercises.name}</Text> #how to style in ReactNative, style= camelCase
const styles = StyleSheet.create({container: {backgroundColor: '#fff', alignItems: 'center' }) #or you can style in stylesheets, notice how the values are in curly brackets 'quotes' and have camelCase different than CSS
const styles = StyleSheet.create({
  exerciseName: {
    fontSize: 24,
    fontWeight: "500",
  },
});
<Text style={styles.exerciseName}>{exercises.name}</Text> #will get our declared styles from the 'styles' variable and use it for the <Text>
<View> #you can use views similar to a <div> element in JS and make it a container element

30:00=================================================================================================================================================================================================================================
FlatList #allows us to render multiple items, used to manage and render properties, like a for loop
<FlatList 
      data={exercises} #tells flatlist where to get data
        renderItem={() => {
          return (
            <View style={styles.exerciseContainer}> #tells flatlist what data to render, used as a function, will render our execises container
      );}}/>
after fixing android studio and simphone, now we are rendering all the same items, every exercise(plural) is a bicep exercise. fixed this below by adding 'props' to render item and our {} display tags
renderItem={(props) => {
<Text style={styles.exerciseName}>{props.item.name}</Text>
you can destructure by adding {}, like below, will simplify 'props.item.name'  to 'item.name'
renderItem={({ item })
<Text style={styles.exerciseName}>{item.name}</Text>
we now need to create a custom component to render each item, same as react, what we have works - but is not best practice
you can declare a custom component with 'function' or '=>' start with a Capital letter, be descriptive, 
function ExerciseListItem({ item }) {
  return (
    <View style={styles.exerciseContainer}>
      <Text style={styles.exerciseName}>{item.name}</Text>
      <Text style={styles.exerciseSubtitle}>
        {item.muscle.toUpperCase()} | {item.equipment.toUpperCase()}
      </Text>
    </View>
  );
}
<FlatList
        data={exercises}
        renderItem={({ item }) => <ExerciseListItem item={item} />}
      /> #will now render our custom component with all items declared and destructured in the props
moved our component to 'src / component / ExerciseListItem.jsx', fixed CSS, only need it in one place, component CSS goes with the compoonent, container with container
contentContainerStyle={{ gap: 10 }} #new property, creates boxes that look wayyyy better than padding or margin
every time you render through a flatlist, or an array with a list of items, you should always give them a key/id property, in order to cache and rerender properly
keyExtractor={(item) => item.id} #keyExtractor is an inbuilt function you can use to map keys/ids, will not work if you have duplicate Id values, must be unique
keyExtractor={(item, index) => item.name + index} #it can also take index position, and even if a name is duplicated, it will take the index as well
subValue: {
    textTransform: "capitalize",
  }, #allows us to capitalize any text with the <Text style={styles.subValue}>{item.muscle}</Text>

to add Typescript to our project, simply rename app.js to 'app.ts' and expo will detect that change and incorporate typescript in your project
next step is to use Expo Router to setup the navigation:
https://docs.expo.dev/router/introduction/
https://docs.expo.dev/router/installation/#manual-installation
Expo Router is built on top of React Navigation is the first file based navigation system for React Native Apps, it works by using a specific file structure similar to NextJS
npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar #will install expo router and all dependancies from terminal
npx expo install react-native-web react-dom #will install web dependancies
'app.json' added '"scheme": "workouts",' '"bundler": "metro"'
'package.json' changed "main": '"expo-router/entry"'
modified 'babel.config.js', nvm already added.

60:00===============================================================================================================================================================================================================================
First things first, now that we have routing, we need a homescreen, moved all of our work from starting 'App.js' to 'index.js'
created new folder src / app / 'index.js'
React Native Colors:
https://reactnative.dev/docs/colors
React Native Shadow Generator:
https://ethercreative.github.io/react-native-shadow-generator/
Created new page, src / app / 'exercise.js' to hold all the exercise details, can get to it easier through browser, 'localhost:8081/exercise' to navigate to it
import { Link } from "expo-router"; #allows us to link to other pages in our app
<Link href={'/exercise'} style={styles.exerciseName}>{item.name}</Link> #A link is similar to a text component, or <a>, requires an href={}, this will link to our newly built exercise page
<Link href={"/exercise"} asChild> #will allow us to wrap our entire container, so we can click anywhere and still go to the page
  when you wrap a container in a <Link>, ensure that the child has an onPress event
<Pressable style={styles.exerciseContainer}> #Pressable is similar to view, but can use the onPress event, and will allow us to use our wrapped <Link>
import { useLocalSearchParams } from "expo-router"; #will allow us to get details for our page
<Link href={`/${item.name}`} asChild> #will now link dynamically to our exercise.name, and will be URL encoded
created new src / app / '_layout.jsx' #will be applied to every file/screen/page - for headers and footers, and global providers
import { Slot } from "expo-router"; #will simply render the screen(of other pages)
import { Stack } from "expo-router"; #will render the page(slot) but also allow a header / with navigation
export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="Index" options={{ title: 'Exercises '}} />
    </Stack>
  );
} #will allow us to add titles, to our main page it will display 'Index', when we click an option it will display 'Exercises'
React Navigation Docs:
https://reactnavigation.org/docs/getting-started
<Stack.Screen options={{ title: exercise.name }} /> # will also display dynamic name

1:30:00=============================================================================================================================================================================================================================
Currently if the exercise has a lot of instructions, it is not scrollable, because we have not specified it, 'import { ScrollView } from 'react-native';' will allow us to scroll... through our view >.>
<ScrollView styles={styles.container}> #will allow us to scroll, but we will lose our gap
<ScrollView contentContainerStyle={styles.container}> #will give us our gap back by using the 'contentContainerStyle'
Next we will need to create a 'See More' button, which will require a state variable to track if the button is pressed: 'import { useState } from 'react;'
const [isInstructionExpanded, setIsInstructionExpanded] = useState(false); # 2 values, first is the actual value of the state, the second is a function, a setter which can update the value
<Text style={styles.instructions} numberofLines={isInstructionExpanded ? 0 : 3}> #if expanded will show '0' or all lines, if not expanded will show 3
<Text onPress={()=> setIsInstructionExpanded(!isInstructionExpanded)} style={styles.seeMore}>See More</Text> # onPress Event, will use our setter to change the expanded variable '!' = not 
to update a variable, you should always use a setter, never use the variable directly
Now we need to change the 'See More' to 'See Less' if it is expanded, you remove the static text and add a {Javascript Expression} to accomplish this based on the value of our variable, like below
{isInstructionExpanded ? 'See Less' : 'See More'} #ternary operator, if the value is true 'See Less', if false 'See More'
When we put styles in the root layout, they will be on every page and overwrite each individual pages CSS, they take priority
Tabs(displays our pages as tabs) Vs Stack(Displays our pages with navigation features - back button, swipe to navigate, etc) Vs Slot (slot displays our pages with no navigation features)
If you want shared behaviour between screens like listen for notifications, custom view, popups, etc you would do it in the root layout

Next we need to create an account on API-Ninjas:
https://api-ninjas.com/
And get the exercises from their api using stepzen GraphQL API:
https://api-ninjas.com/api/exercises
IBM Stepzen:
https://stepzen.com/
https://www.ibm.com/docs/en/stepzen
npm install -g stepzen #will install stepzen globally on our machine
Account created, we will need an admin key and API key
stepzen login #will ask us for our credentials
We are going to build a GraphQL API, combine different resources, connect it to a custom database using IBM Stepzen, 
stepzen/ibm is garbage trash - multi bilolion dollar company - I'm sorry hal, I can't do that (give me API admin name and key for stepzen), thanks ramjeet sukhdik 
I created 2 accounts, can't log in with either, connected github, rajesh must've been getting paid hourly for this one, nothing works, set up the API(attempt) 3 times, wasted hours, literally sh!t code, can't even log in to stepzen
going to need to build my own API endpoint, or create my own API call, or import exercises manually(taking multiple hours/days longer than what should be the case) - at least I didn't pay for this trash
no saaaaarrrrrrr I did not redeem, I can't log in with credentials, when I try to log in - it keeps circling me back and forth between 2 websites stepzen and ibm - I will have to build my own, non-sh!t covered code - 
will need to build an input page, with an ORM, using MongoDB+Mongoose, and figure out a way to fetch data with the API or just manually input a bunch of exercises until we can move forward(hours wasted because of above)

Instead of just following along, I now need to build an input page, read docs, connect that input page to mongoDB, set up an ORM, make an API, create a fetch, test that, input dozens of exercises, create a way to create/edit/delete
  then hook CRUD up to DB, then add new page(s) to my main app, then test that, fix CSS, post fetched data to main page, and more... at least I can reuse the create exercise functionality when I actually get back in da gym(escape)
MongoDB for React Native:
https://www.mongodb.com/docs/atlas/app-services/tutorial/react-native/
https://www.mongodb.com/docs/atlas/
https://benestudio.co/mongodb-app-services-react-native/
MongoDB React Native SDK:
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/app-services/query-mongodb/
https://github.com/realm/realm-js/tree/main/examples/rn-todo-list
React Native Docs:
https://reactnative.dev/docs/getting-started
NextJS Docs:
https://nextjs.org/docs
Use GoogleSheets for saving workouts (MVP):
https://medium.com/ibjects/simplest-approach-to-build-a-react-native-app-with-google-sheets-api-3f3f89a20079
https://www.reddit.com/r/reactnative/comments/qld6bu/using_google_sheets_as_a_db_on_react_native/
https://www.npmjs.com/package/google-spreadsheet
https://www.freecodecamp.org/news/react-and-googlesheets/
https://sheet.best/
MongoDB docs recomend using SDK with React Native, mongoose is for react I guess? I want it to store data when offline and upload when it has a connection to MongoDB, backing up my workouts, 
  Maybe we can store exercises/workouts locally and create an upload API to the DB? how would that work from browser to iOs to android? How would that work if we host it on vercel for free? does vercel store data?
  I'm going to be primarily using it from my phone at the gym, maybe we don't need to store locally and can just depend on a connection? I've never used SDK, need to do alot of reading,
  It would be so much easier if we could just get the functionality of an excell spreadsheet where each row is a day, and each column is a workout exercise + reps , can we connect google sheets somehow? that would work on all devices?
  Or maybe make the exercises use MongoDB, because we already created the Create page on the app, just need to connect API to download the exercise list to use anywhere from any device
    - since we will be working out in Japan we should have internet at all times, and we can use googlesheets to get a MVP out - I'll be the only one using it - don't need authentication(nice to have) or scalability
    Maybe save locally on a 'workout sesh page' and then have an 'upload workout' that stores the workout to google sheets all at once, what about when I want to just do 30 situps/pushups real quick? keep page open?
  need to do alot of reading to figure out the easiest way to get this done, I like saving it as a google sheet, that I would have access to on any device, without querying a DB
  save exercises locally, using 'exercises.json', it should update everytime we open the app, can still use our create exercise page, save each new exercise as a json object
ERROR: We can not write a JSON file if we we are hosting on Vercel(serverless), we NEED to save our exercises on MongoDB
https://github.com/orgs/vercel/discussions/456
Maybe cache data locally until we are done workout, and upload as one line in google sheets 'Date / #-Exercise1-Weight / #-Exercise2-Weight / ...' that way cache can save any calisthenics we do during the day even if we close app

Installing Realm/MongoDB Atlas SDK for React Native:
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/install/#std-label-react-native-install
npm install realm #from root directory in terminal, will install realm
Install Hermes:
https://reactnative.dev/docs/hermes
Convert to Typescript(Optional):
https://reactnative.dev/docs/typescript#adding-typescript-to-an-existing-project
npm install @realm/react #installs the @realm/react Library @realm/react is an npm package that streamlines common SDK operations like querying, writing to a database, and listening for object change notifications. 
  This reduces boilerplate code, like creating your own listeners and state management.
npm start #Runs app
import Realm from "realm"; #import realm

2:00:00=================================================================================================================================================================================================================================
Going back to tut, finish app, see all features, will add DB after, have all docs I need to fix, will just need to manually input for testing through MongoDB, sucks but works, will be fully functional because I actually want to use
stepzen import curl <api URL> #if rapminjderp from stepzen/ibm didn't screw me through poo code/login authenticASean shite, this is what I would need to do to use stepzen/graphQL - one line of code
  at least the guy in tut is struggling as much as I was, SeanDenFreud, it's not just me. Except he actually got to the API key stage, video was sponsored by stepzen - smells カレーfishy - no sane man would willingly subject themselves
after succesful import, it creates a folder 'curl' with 2 files 'index.graphql' with schema and 'stepzen.config' with API endpoint,
  everything is considered a type RootEntry {key: string} and it created a query with API ninja key in an easily accessed public file, nice. 
I could just get GraphQL to work without the stinky middleman of stepzen, or just set up my DB schema the right way, many opseans,  
stepzen start #After defining the schema, the next step is to deploy and run the API, will deploy the schema to the stepzen cloud, you will get a link for the GraphQL endpoint
the reason why GraphQL API's are nice, is that you can customize the information you pull - don't want difficulty? (everything is beginner to me) simply remove it from the schema/API endpoint to change the query
If you want to add other parameters to a query, you just need to add them ', Key: Type'  dollarsign $name will allow dynamic queries
2:20:00================================================================================================================================================================================================================================
Next we are going to use React Query to query the API - we might be using something different, if we aren't using GraphQL/steppoop
React Query Library:
https://tanstack.com/query/latest/docs/framework/react/overview
npm i @tanstack/react-query #will install react-query to our project, we installed even though we might not use, just remember to remove GraphQL/ReactQuery/steppoop from dependancies before uploading to Vercel
First step is to create a 'const queryClient = new QueryClient' #check 2:20:00 if we need to use, not adding a bunch of superfluous code to follow along, if we are using a different API
since we are using it in all screens, it should be used globally (Root layout), where we keep global providers, wrap stack navigator in a <QueryClientProvider client={client}> #everything wrapped will now be able to run queries

2:30:00================================================================================================================================================================================================================================
Next he adds query into 'index.jsx'
if (isLoading) { return <ActivityIndicator /> }#built in component of react native, a simple spinner, that you can use to show when loading
ReactQuery useQuery function can get data from axios, fetch API, crud QL / it handles loading logic, error states, cache and optimization
npm i graphql-request #he installs graph-ql request
npm i graphql #also installs graphql
import { gql } from graphql-request #allows him to use graphQL to create a query, copied query from steppoop surrounded by `backticks`
He's still struggling with steppoop, nice. Hope the sponsorship was worth it. 
Headers are hard, 4 hour tut could of been reduced to 2 if he actually edited, at least he acknoledged you shouldn't put your API key in the actual code, regret wasting time on this guy, not worth it. 
Going to try to finish this today, so I can build my own (better) app, have I reached a level of coding where I can watch a tut and criticize the so called 'expert', all I've gotten from this is the exercise <Stack />
could of gotten all of this from the docs in a fractSean of the time, was almost a waste of time(days) doing this tut
const { data, isLoading, error } = useQuery({
queryKey: ['exercises'],
queryFn: () => client.request(exercisesQuery),
}) #will handle data fetching, loading states, and errors with React Query, might need this later ~2:50:00 ish
if (isLoading) {} / if (error) {} #fill in the {} with whatever you want to return if one of these happens
EXPO_PUBLIC_GRAPHQL_API_KEY = "finally added it"
const apiKey = process.env.EXPO_PUBLIC_GRAPHQ_API_KEY
The API from API Ninjas, does not contain an ID in the schema/model, probably better if we build our own anyways, don't need to do [name].jsx, [id].tsx
instead of GraphQL, just use props and take what we want, destructure and use - we are literally going to be rewriting everything, even our main page, this tut was for boilolerplate - at least it got me started using React Native
queryKey: [] #used for cacheing results and invalidating results if something is wrong

3:00:00===============================================================================================================================================================================================================================
Now we are doing searching and pagination(3:04:00) - finally something useful - unless it uses graphql/steppoop - he wants to keep tut below 4 hours and doesn't even think he can implement them - le sigh -
He only has time to implement workout log for exercises - since I'm doing this in excell, not useful, The pictures he showed at start had all the features he didn't have time to build steppoop - is he even gonna show MongoDB? lol
At least we can use this to add new sets from the [name].jsx, which will be our [id].tsx, kind of useful 
He created a component, I kind of want a button, next to exercise that saves the reps and weight - can we cache? Normally stays the same unless we get stronger(rare/slow)/weaker on bad days(rare)
  might have to store as a value on MongoDB? - so it saves accross seshes and we can just press a button 15-curls-30lbs and add to spreadsheet - don't want to add like 6 more clicks per set to set the weight/reps/exercise
can add a bottom bar for calisthenics stuff if we want to just bang out 30 situps / 25pushups / 10 pullups / etc and can just click one button, no menu change, most common exercises
could do the same for a calorie counter / water intake as well - bottle = 250ml / cup of kohi / etc Vs do we really wanna get that autistic about food again? weighing grams of chicken was tedious AF
  Just eat healthy(non slop/non western/no seed oils/no sugar/low carbs >100g=ketosis food-theres a reason why 80% of you MF'ers are obese, your so called 'food' is literally poison-why are there no fat people in Japan? Escape.)
You Vwill marry and date the 30 year post wall STD ridden strong independant dependopotamous who votes to take half your income, and then divorces you whenever she's unhappy for cash and prizes - No, I don't think I will. Escape. 
RapJeet can have them, western woman are your problem now, enjoy your 80IQ dalits, you 2 truly do deserve eachother. Affirmative AxSean and all that, unironically not my problem. Escape. - Who is going to clean up '"OUR"' mess? lollmao 
First we need 2 TextInputs, <TextInput placeholder="Reps" styles={styles.input} />  #uncontrolled input
input: {
    borderWidth: StyleSheet.hairlineWidth,
    flex: 1,
  } #the smallest width you can have in StyleSheet, flex: 1 will make them share a line, 
And a button <Button title="Add" onPress={addSet} /> #Built in React-Native button, will look different on iOS and android, we will need to build a function to handle and store values, 
Maybe add variables that save and place values into text inputs? what if we superset? will the values stay? Just using tut for boilolerplate, can add features after we finish
import { useState } from 'react'; #to create a controlled input, we need State variables, for that we need useState
  const [reps, setReps] = useState('');
  const [weight, setWeight] = useState(''); #actually useful, we needed to do this to save our values, the State is going to be a string, when we submit it we are going to transform it to a number
Now we need to bind the state variables with our inputs, to bind it you need to provide two values: 1: value={reps} should match, onChangeText={setReps} #when the user changes the text, we want to update the new value
<TextInput value={reps} onChangeText={setReps} placeholder="Reps" styles={styles.input} /> #read above
instead of saving the values(you only doing one set, brah?) he just resets them with below, we don't want this, because we don't want to be small, but good to know:
  const addset = () => {
    console.warn("Add Set: ", reps, weight);
    setReps("");
    setWeight("");
  };
You can specify what type of keyboard to use (letters vs numbers) by 'keyboardType="numeric"' to the text input field
MongoDB Atlas: Create Account -> Create Project -> Create Deployment -> Create a Cluster(we are using M0, for free) - it will automatically add your IP on whitelist, creates a username and PW(save in env)
Data explorer = shows you what query examples should look like, 
Example Queries
Run queries directly in the Data Explorer interface. For example, use a filter query to filter for documents:
{ <field1>: <value1>, ... }
Run this query on the sample_mflix database and movies collection to filter for Drama and Fantasy Movies:
{genres : ["Drama", "Fantasy"]}

Collections = DB Tables, without a structure(what ORM's are for), 
Create a new DB -> Insert Document to specify key: value pair fields (Workouts.sets = DB name, we might be using google sheets for this, we don't need to query to see our workouts, way easier.)
  exercise: "name" / reps: int32 / weight/time: double(allows floats) 
Maybe we can follow along and store reps on both sheets AND mongoDB, would that work? 2 posts instead of 1
created a new project 'Workouts'-Cluster0 - we accidently added example data, we can delete this to gain more space, cap is 500mb logical size - already at >100mb with our other projects - how soon till we cap?
created a new collection/DB 'workouts.sets' - adding in some dummy data and making another DB 'collections.exercises' - now have 2 DB's we need to get started -
creating some dummy data for workouts.sets, will delete later, going to implement our own exercises, schema might change
Now that we have some dummy data, can integrate it into our deployment - actually useful, unless he uses steppoop

3:30:00==============================================================================================================================================================================================================================
crap, he is using steppoop:
https://developer.ibm.com/tutorials/awb-accessing-mongodb-using-graphql-interface/
Not useful - at least we will be finished tut tonight and can actually work on the project features
Step poop 1) first on MongoDB atlas side, Enable the Data API (from left side menu) Rest-Like endpoint, will allow you to send rest like requests - tut restricted ui ip access(10 minutes of debugging - learn2edit)
step poop 1.5) configure IP access, google error code, X10+ minutes * Y views = you wasted Z minutes, because you are too lazy to edit, tut could of been reduced to 2 hours, 2 hours * Y views = :( (>100k subs)
step poop 2) Test your API -> Generate API Key (name it) -> Copy key -> paste to .env -> copy snippet (select cluster/DB(workouts)/collection(sets)) -> copy curl command -> test in terminal 
  change findOne -> find, ->  delete "projection": {"_id": 1}, #don't forget to delete ',' final comma, or else it will fail
Step poop 3) make sure to change no access -> read and write for database cluster
after that, 'cd api' and run curl command, it will create another folder 'curl' and it will create an 'index.graphql'
Next we are going to create a component that renders a list of sets: 'SetsList.jsx' added and imported component to '[name].jsx' ~3:45:00
We are going to be using a different setup, with our 'SetsList.tsx' being at the top, with a list of all sets completed for that day, he does literally every single set completed per exercise, on the exercise page, no thanks.
He isn't even showing how to add an exercise into the DB for the tut, half of it was him debugging and reading documents, garbage tut and he has over 100k subs? lol, lmao

3:59:00===============================================================================================================================================================================================================================
Finished garbage tut, garbage steppoop, wasted days, going to read docs on my own and build my own, didn't even get close to building even remotely what I wanted - going to be building all day tommorrow to make up for wasted time. 
Added a query, still need to test, it should populate all exercises done that day, need to add a <Link> to RootLayout Navbar, some dummy data, now with one click on any page, we can see todays progressSean
Still need to setup env variables, with API keys, collections are created on MongoDB, need to fix 3 pages with new query, Still have a tonne of work to do before we can even test - still using exercises.json for dummy data,
need to add actual exercises, figure out right schema for that so we can reference correctly, fix / ManualInput / 'page.tsx' 
Start with env variables, get hooked up to MongoDB correctly, add some exercises, test our code - busy day - phone sim makes PC run super slow, might focus on web for now

Had to go back to .jsx, when I converted one file to '.tsx' it had a wall of errors, I don't want to mess around with that, official docs for future reference:
https://reactnative.dev/docs/typescript
https://stackoverflow.com/questions/74206996/react-cant-find-a-module-after-converting-to-tsx

sheet.best resources:
https://sheet.best/
https://medium.com/ibjects/simplest-approach-to-build-a-react-native-app-with-google-sheets-api-3f3f89a20079
https://www.freecodecamp.org/news/react-and-googlesheets/
https://www.reddit.com/r/reactnative/comments/qld6bu/using_google_sheets_as_a_db_on_react_native/

Realm React-Native SDK:
https://medium.com/code-well/choosing-the-right-database-for-your-react-native-app-137f4893b182
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/
Verify Hermes:
https://reactnative.dev/docs/hermes
Realm 'path:' variable:
https://www.mongodb.com/docs/atlas/device-sdks/sdk/node/realm-files/open-and-close-a-realm/

Formik(for our input exercise page):
https://formik.org/docs/overview

Expo Routing:
https://docs.expo.dev/router/create-pages/
More Expo Router Navigation Docs:
https://docs.expo.dev/router/navigating-pages/

We are going to use realm for our database posting, need to read docs. Start working on implementASean, gonna be a loooooonnnngggg day. The sooner we finish, the sooner we escape canada and eat good food, escape abusers. 
ERROR:
Web Bundling failed 5254ms (node_modules/expo-router/entry.js)
Unable to resolve "axios" from "src/app/ManualInput/page.jsx"
We had an error with formik, installed it, now works, now we have an error with axios, causing our web bundler to fail with expo/metro, need to fix our dependancies before we can even load our app
won't even be using axios, need to rewrite for realm, - got it rewritten, now need to figure out how to connect realm to our mongoDB, looking good so far, step 1 is to add exercises, then we can work on rest
Still working on setting up realm having trouble with certain variables, need to make sure everything is good before attempting to upload an exercise, ah found out, it can be named literally anything. 
  The 'path: ' property specifies the name of the Realm database file. In this case, the database file will be named myrealm.
  Realm databases are stored on the device's local storage. This means that the data in the database is persistent and will not be lost if the app is closed or the device is restarted.
  You can use the Realm instance to create, read, update, and delete objects in the database. You can also use Realm to query the database to find specific objects or groups of objects.
Created Navbar for add exercise, might move it from 'Root Layout' to 'index.jsx' or simply add a line at top with <Text>'Add Exercise'</Text> with an onClick that goes to 'ManualInput.jsx'
  the top is prime real estate, can add our 'current workout sets' link there instead and just have the 'add new exercise' in a less conspicuous place, once we are set up, won't be used frequently
npm run # ran into a problem, need to remove my old page2 / page3.jsx, sucks but we need to test, they are causing problems and need to be gone, going to take a break and think about what to do next then test
NEW ERROR: Web Bundling failed 4244ms (node_modules/expo-router/entry.js)
Unable to resolve "#realm.node" from "node_modules/realm/binding/generated/native.node.cjs" 
https://github.com/realm/realm-js/issues/1060#issuecomment-465934019
https://github.com/realm/realm-js/issues/3927
Removed a bunch of dependancies, and webpack still can't compile, going to try above fix and see what happens - I've been working since I woke up and havn't even gotten to the testing phase - 
Realm Web SDK:
https://www.mongodb.com/docs/atlas/device-sdks/web/quickstart/
npm install realm-web #installs realm-web to our app
import * as Realm from "realm-web"; #will allow us to use realm on web, I want mobile, need to do some more testing 
Finally got my app to load only took... ~12 hours? Now we can test our database, can't navigate to 'ManualInput.jsx' through browser, and my navbar isn't showing link, at least it loaded.. positives. 
added a tiny text button at bottom of 'index.jsx' for 
When I clicked the 'ManualInput' button it would bring me to the 'exercise not found' page, which is an error message I left for exercises, so the routing isn't working?
Ok, so I think what is happening is that [name].jsx is messing up our routing, maybe we got the naming convenSeans wrong? Created a new folder [name] and 'page.jsx', and moved file into there, it should work, but it doesn't.
Need to fix this, then test our manualinput, but can't even get to that page even in the browser with a URL, need to do more reading and maybe change file/folder setup, THEN we can FINALLY test our code.
Maybe rename 'page.jsx' to 'index.jsx'? might need to do more reading on naming conventions for React Native / NextJS / Expo Routing <- It's this, after reading it's 'index.jsx'
Andddddd... We got our exercise pages to load, but the next hurdle appeared. Did we declare the variable in .env.local correctly?
Uncaught Error: Cannot read properties of undefined (reading 'MONGO_DB_URI')
https://stackoverflow.com/questions/48699820/how-do-i-hide-an-api-key-in-create-react-app
Ok, seems to have fixed it by adding 'const apiKey = process.env.REACT_APP_MONGO_DB_URI;', Next Hurdle:
Uncaught Error: Missing an Atlas App Services app-id
this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;
Problem Area seems to be here:
const apiKey = process.env.REACT_APP_MONGO_DB_URI;
const app = new Realm.App({ id: apiKey });
The error Uncaught Error: Missing an Atlas App Services app-id indicates that you have not provided an app ID when creating a Realm.App object.. except.. I did, :( need to do more reading.. 14 hour day. Escape.
https://www.mongodb.com/developer/products/mongodb/real-time-data-javascript/
I think this is the fix, taking a break. ExhaustSean:
https://www.mongodb.com/docs/atlas/app-services/authentication/api-key/

20 April 2024
Back to work, read through docs, going to try some things and google how to get an 'Atlas App Services app-id' docs I landed on last night(morning?) at end were talking mostly about authentication, that's a future sean problem
More Reading, notes for future reference, 50 tabs open:
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/manage-users/manage-user-api-keys/#std-label-react-native-manage-user-api-keys
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/app-services/#:~:text=The%60%60App%60%60%20object,in%20the%20App%20Services%20UI.
Future Sean, don't forget to fix routing after this, potential fix is new file structure with '/ exercise / [id]' instead of [name], because how many variations of bench/pushups/earth downs can you do? - avoid duplicates / wrong page
  with new dedicated page for exercises, we should, technically, in theory, be able to use '/ManualInput' URL.. finally, and actually test our code and move on, in theory
  How do we get the page to connect the right 'id' to exercises / [id]? referennce what we used for [name] in the past, and make some ch-ch-changes, also read docs on expo routing
Steps: Log in to MongoDB Atlas -> Overview -> App Services -> 
1Download the CLI Client
npm install -g atlas-app-services-cli
2Create a Programmatic API key
Use this API key associated with your MongoDB Cloud account to authenticate your appservices cli session. To create or use an existing API key, 
view and manage your API keys here.
3Authenticate to the appservices cli
appservices login --api-key <my-api-key> --private-api-key <my-private-api-key>
4Download via appservices cli
Choose a language for the front-end code for your template and then download the files into your current directory via cli command. 
Set up your CLI.
appservices pull --remote application-0-xldztvy --template react-native.todo.flex
5Follow the Guided Tutorial
View our React Native Tutorial -  for a step by step guide on how to set up your example app.
More Docs..:
https://www.mongodb.com/docs/atlas/app-services/
https://www.mongodb.com/docs/atlas/app-services/manage-apps/configure/export/export-with-cli/
https://www.mongodb.com/docs/atlas/app-services/cli/
https://cloud.mongodb.com/v2/6621975584c7a044fb57cb38#access/apiKeys
https://www.mongodb.com/docs/atlas/app-services/cli/
https://www.mongodb.com/docs/atlas/app-services/tutorial/react-native/
==Success?==
Saved app to disk
Successfully pulled app down: Application-0
Successfully saved template(s) to disk
  react-native.todo.flex: Application-0/frontend/react-native.todo.flex/README.md
Navigate to the saved directory to view directions on how to run the template app(s)
We just added like 100 files and 20 configs to our project, for one API_Key, did we mess up? haven't tested yet to see if the key works, seems a bit excessive, this is worse than a 'create-react-app' might need to delete
  Starting project at /media/sean/SeanDrive/Code/Eviliusean.github.io/ReactNative-WorkoutApp/Workouts
  env: load .env
  env: export REACT_APP_MONGO_DB_URI REACT_APP_API_KEY
  Starting Metro Bundler
  ✔ It looks like you're trying to use TypeScript but don't have the required dependencies installed. Would you like to install typescript@^5.3.0? … no
  CommandError: Please install typescript@^5.3.0 by running:
  npx expo install typescript
  If you're not using TypeScript, please remove the TypeScript files from your project
npm start #Just got greeted with above error, do we need to use TS? Last time I tried I got a wall of errors, which would take hours(?) to fix, maybe we need to delete Application-0 file, I just want to test my API_KEY :<
  We could move our files in there and start working with the new configs and just replace the files or.. delete - I think we made a mistake and accidently installed another project in our project, projectSean
  Hopefully nothing breaks, and API_KEY works, then we can finally test our database, day 2 of trying to get one page to open, If I need it, I know where to find it, in the trash. "Know your place - Trash!" -Joji(Filthy Frank)
  https://www.youtube.com/watch?v=_QkKOTsW8jk&ab_channel=AFaceHiddenInTime
Still need to fix routing, created new folder 'exercises' moved [name] folder and 'index.jsx', and something broke, 'npm start' now giving me a blank screen :<, need to read docs.. again.. oof
Web Bundling failed 3769ms (node_modules/expo-router/entry.js)
Unable to resolve "../../../assets/data/exercises.json" from "src/app/exercises/[name]/index.jsx"
Fixed the routing issue forgot a '/' in file name for a dynamic page, works now - trying to fix our input page
Not even typing in the url manually is working, tried making all lowercase, added 'push' to our link tag, renamed folder, 
  Ok, got it to load, now we are back to the same issue.. 'Missing an Atlas App Services app-id' - I thought I fixed this? Maybe need to use the public key/maybe those config files were'nt trash
Fixed it, forgot "" to wrap string with quotes - next hurdle - Maybe forgot to declare all variables and give an initial value? I didn't declare '_id' or 'count'
Uncaught Error: Cannot read properties of null (reading 'mongoClient')
https://www.mongodb.com/community/forums/t/typeerror-cannot-read-properties-of-null-reading-mongoclient/145744
I think I found it - When I created a new project it automatically created a new MongoDB - App - Project - so I went through all the steps on the wrong App, the DB didn't exist, going through guide now setting up correct API
Setting permissions, future Sean - just follow the guide on App Services page - still having problems - getting closer - a few more hours, and we can just copy this code for every other page that needs a DB 
Found the fix, needed credentials
  const credentials = await Realm.credentials.anonymous();
  const user = await app.LogIn(credentials);
Uncaught Error: Objects are not valid as a React child (found: [object Promise]). If you meant to render a collection of children, use an array instead. Next hurdle. Functional components can not be async
Uncaught Error: Cannot read properties of null (reading 'mongoClient') change const mongo to 'const mongodb'
Uncaught Error: Realm is not a constructor
https://github.com/realm/realm-js/issues/1226
https://github.com/realm/realm-js/issues/5032
https://github.com/realm/realm-js/issues/2563
https://github.com/realm/realm-js/issues/2460
https://github.com/realm/realm-js/issues/6041
https://www.mongodb.com/community/forums/t/missin-realm-constructor-error/166726/43
Apparently need to enable hermes, thankfully I saved those docs.. It's not hermes
Might need to actually use the template, move all my code over to a new layout.. gonna work on this a bit longer see if I can get an easier fix - going to comment some things out and google again before rebuilding
We literally built a constructor, updated '_id', renamed our 'path:', updated the schema, updated 'onSubmit', and we are still getting the error, DemoralizeASean is kicking in, about to be day 2 and still havn't tested a page
Maybe we need to start console.logging and see exactly what is going on, because I'm seeing at least 3 different distinct spots this code could be broken.. more docs! I really don't want to add a template and replace everything
https://www.mongodb.com/docs/atlas/device-sdks/sdk/node/model-data/define-a-realm-object-model/
https://stackoverflow.com/questions/72562299/react-native-realm-constructor-was-not-registered-in-the-schema-for-this-realm
https://www.mongodb.com/docs/realm-sdks/js/latest/Realm.html
Getting tired, gonna rest, maybe comment out all of the code and make it a future sean problem, I might still be able to use best.sheet to store my exercises, this constructor error has been ~4hours and 0 progress..

21 April 2024 - Day 3 - Finished some boilerplate for a 'sets' input page using best.sheets before sleep last night, after thinking about it, MongoDB is for high volume DB, I could still get the same FuncSeanality out of gooogle sheets
Realistically the volume is going to be inputting one set every few minutes - you would need to type out the exercise instead of selecting from a list, but that would be an extra few seconds tops per set, not a big deal
It should save our sets in a setSets(lol) array, I'm wondering if this will cache data if we are hosting on vercel? - what happens if I switch out of app - would it create a new google sheet or use old one? how do we manage that?
I think best move is to have it set a date on current sheet - and if that date exists, add the set there, or do a batch if we can cache and just hit a button at end of workout to upload to master google sheet with date
Going to read docs.. at least we are making progress, if I can get this figured out, can always go back to set up Realm/MongoDB, I just have no idea why it's telling me 'Realm is not a constructor' when I built an actual constructor
I could also make a seperate googlesheets that can pull data from/upload exercises in a new row with a set schema, or I could just have a long ass 'exercises.json' and update on github at home with exercises for a list
  Vercel should automatically update app with new 'exercises.json' and give me the new list, when I reopen the app, have access to it again. It would allow me to get a MVP out, and worry about using a real DB later on, DeciSeans..
Official Docs:
https://docs.sheet.best/#quickstart
https://docs.sheet.best/#using-your-rest-api
https://docs.sheet.best/#filtering-data
Using Google Sheets API:
https://thenewstack.io/how-to-use-google-sheets-as-a-database-with-react-and-ssr/

sheet.best uses the first row for a schema, so we don't need to mess around with an ORM, or constructor.. 
Guide is very good, easy to follow, even has gif videos, this is wayyyy easier to set up than realm/MongoDB, will see how it looks in React Native after we set up API and can actually test, looks promising so far
https://docs.sheet.best/#generating-your-rest-api
went through the quick start guide, created a new googlesheet for this month to test with, added to sheet.best connection, copied that URL and saved to .env, looks like we will want POST/PATCH/Filtered Update method to add a set
Using your REST API : You can use your Connection URL via REST API through GET, POST, PATCH, PUT and DELETE methods. 
  GET - Read Rows =  Parsed Format: Results can come in parsed and raw formats. They will always come as parsed by default. / Raw Format To get the result in raw format, add a _raw=1 query parameter at the end of the URL.
  POST - Add Rows = To write data, your can send a POST request sending the JSON data to the same URL as your GET API. This will insert a new line on your sheet with the information you've sent.
    You can also send an array of objects to post add multiple rows at once as a JSON object(s)
  DELETE - Delete Rows - You can delete data from your Sheet by making a DELETE request to your API.
  PUT and PATCH requests are two ways of updating existing data in your Sheet.
    PUT - Overwriting row data
    PATCH - Update only the data sent into the sheet
  Filtered Update - If you want to update all rows that have "John" inside the "Name" column, you can make a PATCH or PUT request to
The simplest way would be to just use the POST method for every exercise we do, add a new row with the date / reps / exercise / weightTime
The way I want to do it DATE / reps-exercise1-weight or time / reps-exercise2-weight or time / ... would probably require either a batch POST or PATCH or Filtered Update method.
We could just add a new sheet every month and add 24-30 rows x 5 days a week x 4 weeks = 600 Rows using the POST Method, per month, that's a very busy sheet(s)
Single row layout = 1 * 5 * 4 * 12 = 240 rows for a year, way better 
Sheet.best free tier gives us 15,000 free API calls a month, so we don't really need to send it as a batch, we can also PATCH the same row over and over again without fear, 50 * 7 * 4 = 1400 Upper limit of what we would use per month
We could add a 'Create Workout' button that we can use for that day, and just PATCH that same day, logic seems easy instead of having it check our so called DB - check date - if date is today - PATCH - if not - create
Step Counter Feature? If I'm living in Japan, you know I'mma be walking e'rywhere, exploring, anime/samurai wonderland, easy 20k steps a day - would be nice to track 
After looking for more documentation and checking out the templates for sheet.best, I noticed a profound lack of any materials related to react-native, no documentation, no tutorials, nothing, might need to find another way
Google offers an API method to connect to google sheets, could be another option, going to see if I can use sheet.best because the patch method looked perfect for what I wanted to do, still no resources for react-native
It's all JS, might still work, except how can we use a <script> tag (required for sheet.best) when it doesn't actually exist for react-native?.. need to do more research
Looks like we just wasted more hours reading through the documentation for best.sheet, strictly works on JS/React... not react Native, in order to connect to the API needs a <script> tag, which.. doesn't exist.
So either we pour more time into trying to get mongoDB working, or we find an alternative library, or use google API with .env, install the demo app - from Realm/MongoDB CLI, and move our files into there
https://stackoverflow.com/questions/54872127/google-sheets-api-with-react-native
https://stackoverflow.com/questions/72378926/react-native-and-google-sheets-api-what-should-package-name-and-bundle-identif/72384214
'Google's AppSheet API - doesn't work.. tried the search feature for connect, won't even work with react? ' https://pipedream.com/apps/google-appsheet
https://docs.sheetjs.com/docs/demos/mobile/reactnative/
If we install the Realm/MongoDB from CLI and just build on the back of that (it should be functional, out of the box, with all the API connections working, no need to build constructors for 4 hours..)
  Or we could just build it in React + best.sheet - that feels like cheating because I wanted to build a mobile app. - Also get to put React Native on my resume 
If we install from CLI, should get something like below todo list, then just need to plug and play with code to fix template for adding exercises/sets to DB and fix the UI:
https://github.com/realm/realm-js/tree/main/examples/rn-todo-list
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/install/
https://reactnative.dev/docs/environment-setup?guide=quickstart
'Get Started With App Services' -> View Guide -> Follow steps till CLI stage, then select React-Native CLI, copy and paste command, and voila, new project we can fiddle with working DB and configs - just need to build UI
Going to take a break, we need to start over again, if the DB connections work it will take us less time to start from scratch and just build the UI than trying to fix the DB connect for the third(?) day.

Ok, so what I've decided to do is do a CLI install from the guide, should give me boilerplate set up to the DB, so I only have to change some variables/names around to get it hooked in, no constructors.. -.-
  I just need to figure out if I need to install React-Native on it's own with expo/realm first and THEN install the CLI template, or just CLI template will work and have all dependancies
  It's going into a new folder where the notes/etc stuff are called 'Workout2' - that way all my old code/css should still be there for reference, will need to delete Workouts1 before uploading to vercel - freaks out if too many repos
The DB is the hardest part, once that's done I just need to play with colors and text essentially and make it look pretty
Won't be getting a GoogleSheets from what I could find, no good way to hook in without using JS/React, assUmeing you could use React code in React Native - rookie mistake :<.. positives 'learning experience'
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/bootstrap-with-expo/#std-label-react-native-client-bootstrap-with-expo
I'm going to install through the CLI - only, Test the 'ToDo' app with both phone sim and web, make sure everything works, We've been using expo for running/testing/debugging our app up until this point - if it doesn't might need to
  delete and start from scratch or think of another way to get our 'Workout App' - working - If I can't do this in a controlled enviroment - should I even be working? ++stress from new locaSean ++stress from foreign language
Finally found it, use this to set up a template app for React-Native that works out of the box, no constructors:
https://www.mongodb.com/docs/atlas/app-services/get-started/#tutorials
To use a template, you can't use google sign in for some reason? - how did we get it before? It keeps logging me off every time I try, might just make an account with my proton mail instead of google, start fresh - 
Set up a new MongoDB, with proton mail, doubled my storage 512 mb -> 1gig - should be able to use template now, 
Ah, found out how I got it, App Services -> When you create a new app -> It offers you: Start with an app template: -> Real Time Sync Opsean
  Using App Services reduces the code you need to write. Get started quicker with Templates. <- this is where I got the CLI command to install a project, originally, gonna follow the tutorial, but good to know for future Sean
Get a template then remove everything you don't need, it will keep all the prebuilt features and DB connectivity + offline sync, etc - no constructor building - nice. 
When you create a new ApplicaSean, it will offer you the option to build from the command line, make sure you don't name it 'Application 0' and something more meaningful, below is what we will build for 'Workouts 2';
https://github.com/mongodb/template-app-react-native-todo 
I'm still getting signed out when I go to the tutorial page, weird. Below is how we created the app last time, this is how we can move forward. No expo, but it should work. Created in Singapore (closest to Japan-Escape)
Steps to install from CLI:
npm install -g atlas-app-services-cli #Download the CLI Client
2
Create a Programmatic API key
Use this API key associated with your MongoDB Cloud account to authenticate your appservices cli session. To create or use an existing API key, 
view and manage your API keys here.
3
Authenticate to the appservices cli
appservices login --api-key <my-api-key> --private-api-key <my-private-api-key>
4
Download via appservices cli
Choose a language for the front-end code for your template and then download the files into your current directory via cli command. 
Set up your CLI.
appservices pull --remote workouts-bcxlcun --template react-native.todo.flex
5
Follow the Guided Tutorial
View our React Native Tutorial for a step by step guide on how to set up your example app.
Installed it to our project repository, 'Workouts 2' gonna poke around and see what we got, maybe sean what we did wrong in our original app
It's in typescript, wall of red text x.x, going to need to do alot of work on this, starting with the tut, it still logs me out when I access it, but I already have the files, so doesn't matter:
https://www.mongodb.com/docs/atlas/app-services/tutorial/react-native/
React-Native Quick Start Guide, no tutorial:
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/quick-start/#std-label-react-native-client-quick-start

22 April 2024 - Day 4 - I just realized that steppoop tut stole a week from me - he never hooked up the DB, false advertising, MFer still has >100k subs + ad rev - the only thing I learned was StyleSheet.create, <FlatList>, <Stack> 
  Going to finish mongodb tut, fix the Typescript errors, and start working on redesigning the UI to work for getting huge, it already has autheneticAsean + offline sync built in, which is very nice
The app is a pre-built template that includes a working React Native application (frontend) and its corresponding App Services App configuration files (backend).
Create email/password accounts and log in and out of the app. / Create, read, update, and delete their own tasks. / View all tasks, even if the user is not the owner.
After you've got the template app running, you will add a new priority field to the existing Item model and update the Flexible Sync subscription to only show items within a range of priorities.
cd Workouts2 #new root repository to install dependancies, get rid of some red TS errors
Installing Dependancies (for new project, not useful for the template):
https://reactnative.dev/docs/environment-setup
npm install #will install all dependancies, go to the root of your downloaded or cloned project. Then run following commands to navigate to install the app's dependencies:
ERROR: npm ERR! path /media/sean/SeanDrive/Code/Eviliusean.github.io/ReactNative-WorkoutApp/Workouts2/package.json #while trying to install dependancies, first hurdle :<
https://stackoverflow.com/questions/49415958/what-could-cause-an-error-related-to-npm-not-being-able-to-find-a-file-no-conte
Figured it out, package.json isn't in the root directory, it's in 'root / frontend / react-native-todo.flex '
deleted old package-lock.json that was created when unsuccesful attempt ran, 
npm run android #will run on phoneSim, can test our mobile version, 
error Failed to install the app. #not using expo this time, app failed to install, simphone is open, turned on, computer is slooowwwwwwww, 
https://developer.android.com/studio/run/emulator
Tip: Make sure that you have set up your development environment correctly, by running react-native doctor. 
To read more about doctor command visit: https://github.com/react-native-community/cli/blob/main/packages/cli-doctor/README.md#doctor 
react native doctor #react-native: command not found #new error trying to run
https://stackoverflow.com/questions/37189081/react-native-command-not-found
npm install -g react-native-cli #installs react native globally CLI

react-native doctor #works now, more hurdles..
⠋ Running diagnostics...(node:330793) Warning: Accessing non-existent property 'padLevels' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)
Common
 ✓ Node.js - Required to execute JavaScript code
 ✓ npm - Required to install NPM dependencies
Android
 ✓ Adb - Required to verify if the android device is attached correctly
 ✖ JDK - Required to compile Java code
   - Version found: N/A
   - Version supported: >= 11
 ✖ Android Studio - Required for building and installing your app on Android
 ✖ Android SDK - Required for building and installing your app on Android
   - Versions found: N/A
   - Version supported: 33.0.0
 ✓ ANDROID_HOME - Environment variable that points to your Android SDK installation
Errors:   3
Warnings: 0
Attempting to fix 3 issues...
Android
 ✖ JDK
   Read more about how to download JDK at https://reactnative.dev/docs/environment-setup?os=linux&platform=android&guide=native#jdk-studio
 ✖ Android Studio
   Read more about how to download Android Studio at https://reactnative.dev/docs/environment-setup?os=linux&platform=android&guide=native#android-studio
 ✖ Android SDK
   Read more about how to download Android SDK at https://reactnative.dev/docs/environment-setup?os=linux&platform=android&guide=native#android-sdk
It's telling me to install 'Android SDK Studio', which I already have...with all the JDK dependancies, which I already did.. I already set all this up last time.
Version supported: 33.0.0  - They don't call it version, they call it 'API Level' - mine is 34 - is this it?
https://stackoverflow.com/questions/62797240/reactnative-cant-locate-android-sdk
changed bashrc 'sdk' to 'Sdk' - updated android studio - now have 4 errors instead of 3 - added below to bashrc - commented out ones I had before, no fix, might just install v33 to be able to run(multiple gigs download :<)
export ANDROID_HOME=$HOME/Android/Sdk
#export PATH=$PATH:$ANDROID_HOME/emulator
#export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH=$ANDROID_HOME/emulator:$PATH
export PATH=$ANDROID_HOME/platform-tools:$PATH
export PATH=$ANDROID_HOME/platforms:$PATH
export PATH=$ANDROID_HOME/tools/bin:$PATH
export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
in 'android / build.gradle' - there is below code - going to try to change to 34, see if anything works - didn't work - reverted 'Sdk' back to 'sdk' 
buildscript {
    ext {
        buildToolsVersion = "33.0.0"
        minSdkVersion = 21
        compileSdkVersion = 33
        targetSdkVersion = 33

        // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
        ndkVersion = "23.1.7779620"
    }
https://stackoverflow.com/questions/51479691/how-can-i-upgrade-react-native-gradle-version
https://stackoverflow.com/questions/61922174/react-native-on-android-cannot-run-program-node-error-2-no-such-file-or-dir
Ok, fixed gradle - I think? 'Android Studio' -> go to project folder -> 'android' -> Open in Android studio, will automatically install latest version of gradle - still downloading / updating - upgraded to 8.?
'Gradle sync finished in 15m 17s'
Still downloading - that's alot of files - 'Start AGP upgrade assistant' -> 'Upgrade Project from 7.4.2 to 8.3.2' -> wait for loading spinner? no progress bar.. no files in our actual project changed yet














































