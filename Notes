Features:
Full stack:
FrontEnd:
React Native, Expo, Expo Router, Expo SDK 50,
Backend:
MongoDB Atlas, GraphQL, IBM Stepzen(scalable GraphQL), GraphQL API, API Ninjas(exercises), Custom MongoDB Database
Uses MongoDB to store hundreds of built in exercises with instructions
also stores our workouts and charts our progressSean with progress graphs
Exercise Database has search filter and view functionality
Logs our exercise sets while working out in da gym (react native=any platform, can use in browser because apples walled garden doesn't allow sideloading)
I like that we don't save data locally, have a database that we can access from any device and see progress
we can add features after tut, custom exercises, cardio log, step counter, plans, calorie/macros tracker, etc - need MVP to git a job and escape canada

npx create-expo-app@latest Workouts -t blank #will create an app in our current directory with latest expo
npm start #will run 'expo start', MetroBundler will give us a QR code, and Metro waiting on exp://192.168.2.16:8081
we can scan the code on Android or iOS to see our app, will need to download 'Expo Go' on iOS
Had troubles creating an account / signing into Expo Go,
npx expo install react-native-web react-dom @expo/metro-runtime #installs expos web dependancies, can run expo code in browser
Web is waiting on http://localhost:8081 #we can now write our code and debug in the browser, instead of using mobile device
We can also use simulators, iOS can only be used with XCode(iOS)
downloaded anbox, so we can test our mobile features on a simulator,
sudo add-apt-repository multiverse
sudo apt update
sudo apt install anbox #running these 3 commands will install anbox, a sim for ubuntu
Apparently, above doesn't work, need more:
https://reactnative.dev/docs/next/environment-setup?guide=native&platform=android#android-sdk
https://developer.android.com/studio
tar -xvf android-studio-2023.2.1.25-linux.tar.gz #installs executable downloaded from official site
cd android-studio/bin
./studio.sh #will open android studio installer, will need to add PATH, to fix below error
Failed to resolve the Android SDK path. Default install location not found: /home/sean/Android/sdk. Use ANDROID_HOME to set the Android SDK location.
Add the following lines to your $HOME/.bash_profile or $HOME/.bashrc (if you are using zsh then ~/.zprofile or ~/.zshrc) config file:
export ANDROID_HOME=$HOME/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools
Go to HOME Press 'Ctrl+H' shows hidden files, add above change 'Sdk' to 'sdk' and it works, now need to set up a virtual phone to sim
Error: Can't find the device we installed pixel(something)
https://docs.expo.dev/workflow/android-studio-emulator/
https://developer.android.com/studio/run/device.html#developer-device-options
Fix: You need to first open the device in Android Studio, Then load it through expo/npm start, finally we can get to work.
Will need to download the expo go app on your virtual device before you can start debugging
Finally, we got our app to open on the simphone, only took 3?ish hours, better than flutter(3 days), time to work.
'r' press R to reload the app
'c' press C to clear the console
It should also refresh on save
To run simphone go into 'android-studio'/bin and open a terminal run './studio.sh' to open again

First we need to add some dummy data for exercises, 'exercises.json' it's an array, every item in it is an object with multiple { key: value } pairs
{} called portals to access JS variables use curly braces {exercise.name} #to get the exercise name and display it as an expression
<Text style={{ fontSize: 24, fontWeight: 'bold'}}>{exercises.name}</Text> #how to style in ReactNative, style= camelCase
const styles = StyleSheet.create({container: {backgroundColor: '#fff', alignItems: 'center' }) #or you can style in stylesheets, notice how the values are in curly brackets 'quotes' and have camelCase different than CSS
const styles = StyleSheet.create({
  exerciseName: {
    fontSize: 24,
    fontWeight: "500",
  },
});
<Text style={styles.exerciseName}>{exercises.name}</Text> #will get our declared styles from the 'styles' variable and use it for the <Text>
<View> #you can use views similar to a <div> element in JS and make it a container element

30:00=================================================================================================================================================================================================================================
FlatList #allows us to render multiple items, used to manage and render properties, like a for loop
<FlatList 
      data={exercises} #tells flatlist where to get data
        renderItem={() => {
          return (
            <View style={styles.exerciseContainer}> #tells flatlist what data to render, used as a function, will render our execises container
      );}}/>
after fixing android studio and simphone, now we are rendering all the same items, every exercise(plural) is a bicep exercise. fixed this below by adding 'props' to render item and our {} display tags
renderItem={(props) => {
<Text style={styles.exerciseName}>{props.item.name}</Text>
you can destructure by adding {}, like below, will simplify 'props.item.name'  to 'item.name'
renderItem={({ item })
<Text style={styles.exerciseName}>{item.name}</Text>
we now need to create a custom component to render each item, same as react, what we have works - but is not best practice
you can declare a custom component with 'function' or '=>' start with a Capital letter, be descriptive, 
function ExerciseListItem({ item }) {
  return (
    <View style={styles.exerciseContainer}>
      <Text style={styles.exerciseName}>{item.name}</Text>
      <Text style={styles.exerciseSubtitle}>
        {item.muscle.toUpperCase()} | {item.equipment.toUpperCase()}
      </Text>
    </View>
  );
}
<FlatList
        data={exercises}
        renderItem={({ item }) => <ExerciseListItem item={item} />}
      /> #will now render our custom component with all items declared and destructured in the props
moved our component to 'src / component / ExerciseListItem.jsx', fixed CSS, only need it in one place, component CSS goes with the compoonent, container with container
contentContainerStyle={{ gap: 10 }} #new property, creates boxes that look wayyyy better than padding or margin
every time you render through a flatlist, or an array with a list of items, you should always give them a key/id property, in order to cache and rerender properly
keyExtractor={(item) => item.id} #keyExtractor is an inbuilt function you can use to map keys/ids, will not work if you have duplicate Id values, must be unique
keyExtractor={(item, index) => item.name + index} #it can also take index position, and even if a name is duplicated, it will take the index as well
subValue: {
    textTransform: "capitalize",
  }, #allows us to capitalize any text with the <Text style={styles.subValue}>{item.muscle}</Text>

to add Typescript to our project, simply rename app.js to 'app.ts' and expo will detect that change and incorporate typescript in your project
next step is to use Expo Router to setup the navigation:
https://docs.expo.dev/router/introduction/
https://docs.expo.dev/router/installation/#manual-installation
Expo Router is built on top of React Navigation is the first file based navigation system for React Native Apps, it works by using a specific file structure similar to NextJS
npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar #will install expo router and all dependancies from terminal
npx expo install react-native-web react-dom #will install web dependancies
'app.json' added '"scheme": "workouts",' '"bundler": "metro"'
'package.json' changed "main": '"expo-router/entry"'
modified 'babel.config.js', nvm already added.

60:00===============================================================================================================================================================================================================================
First things first, now that we have routing, we need a homescreen, moved all of our work from starting 'App.js' to 'index.js'
created new folder src / app / 'index.js'
React Native Colors:
https://reactnative.dev/docs/colors
React Native Shadow Generator:
https://ethercreative.github.io/react-native-shadow-generator/
Created new page, src / app / 'exercise.js' to hold all the exercise details, can get to it easier through browser, 'localhost:8081/exercise' to navigate to it
import { Link } from "expo-router"; #allows us to link to other pages in our app






















