Features:
Full stack:
FrontEnd:
React Native, Expo, Expo Router, Expo SDK 50,
Backend:
MongoDB Atlas, GraphQL, IBM Stepzen(scalable GraphQL), GraphQL API, API Ninjas(exercises), Custom MongoDB Database
Uses MongoDB to store hundreds of built in exercises with instructions
also stores our workouts and charts our progressSean with progress graphs
Exercise Database has search filter and view functionality
Logs our exercise sets while working out in da gym (react native=any platform, can use in browser because apples walled garden doesn't allow sideloading)
I like that we don't save data locally, have a database that we can access from any device and see progress
we can add features after tut, custom exercises, cardio log, step counter, plans, calorie/macros tracker, etc - need MVP to git a job and escape canada

npx create-expo-app@latest Workouts -t blank #will create an app in our current directory with latest expo
npm start #will run 'expo start', MetroBundler will give us a QR code, and Metro waiting on exp://192.168.2.16:8081
we can scan the code on Android or iOS to see our app, will need to download 'Expo Go' on iOS
Had troubles creating an account / signing into Expo Go,
npx expo install react-native-web react-dom @expo/metro-runtime #installs expos web dependancies, can run expo code in browser
Web is waiting on http://localhost:8081 #we can now write our code and debug in the browser, instead of using mobile device
We can also use simulators, iOS can only be used with XCode(iOS)
downloaded anbox, so we can test our mobile features on a simulator,
sudo add-apt-repository multiverse
sudo apt update
sudo apt install anbox #running these 3 commands will install anbox, a sim for ubuntu
Apparently, above doesn't work, need more:
https://reactnative.dev/docs/next/environment-setup?guide=native&platform=android#android-sdk
https://developer.android.com/studio
tar -xvf android-studio-2023.2.1.25-linux.tar.gz #installs executable downloaded from official site
cd android-studio/bin
./studio.sh #will open android studio installer, will need to add PATH, to fix below error
Failed to resolve the Android SDK path. Default install location not found: /home/sean/Android/sdk. Use ANDROID_HOME to set the Android SDK location.
Add the following lines to your $HOME/.bash_profile or $HOME/.bashrc (if you are using zsh then ~/.zprofile or ~/.zshrc) config file:
export ANDROID_HOME=$HOME/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools
Go to HOME Press 'Ctrl+H' shows hidden files, add above change 'Sdk' to 'sdk' and it works, now need to set up a virtual phone to sim
Error: Can't find the device we installed pixel(something)
https://docs.expo.dev/workflow/android-studio-emulator/
https://developer.android.com/studio/run/device.html#developer-device-options
Fix: You need to first open the device in Android Studio, Then load it through expo/npm start, finally we can get to work.
Will need to download the expo go app on your virtual device before you can start debugging
Finally, we got our app to open on the simphone, only took 3?ish hours, better than flutter(3 days), time to work.
'r' press R to reload the app
'c' press C to clear the console
It should also refresh on save
To run simphone go into 'android-studio'/bin and open a terminal run './studio.sh' to open again

First we need to add some dummy data for exercises, 'exercises.json' it's an array, every item in it is an object with multiple { key: value } pairs
{} called portals to access JS variables use curly braces {exercise.name} #to get the exercise name and display it as an expression
<Text style={{ fontSize: 24, fontWeight: 'bold'}}>{exercises.name}</Text> #how to style in ReactNative, style= camelCase
const styles = StyleSheet.create({container: {backgroundColor: '#fff', alignItems: 'center' }) #or you can style in stylesheets, notice how the values are in curly brackets 'quotes' and have camelCase different than CSS
const styles = StyleSheet.create({
  exerciseName: {
    fontSize: 24,
    fontWeight: "500",
  },
});
<Text style={styles.exerciseName}>{exercises.name}</Text> #will get our declared styles from the 'styles' variable and use it for the <Text>
<View> #you can use views similar to a <div> element in JS and make it a container element

30:00=================================================================================================================================================================================================================================
FlatList #allows us to render multiple items, used to manage and render properties, like a for loop
<FlatList 
      data={exercises} #tells flatlist where to get data
        renderItem={() => {
          return (
            <View style={styles.exerciseContainer}> #tells flatlist what data to render, used as a function, will render our execises container
      );}}/>
after fixing android studio and simphone, now we are rendering all the same items, every exercise(plural) is a bicep exercise. fixed this below by adding 'props' to render item and our {} display tags
renderItem={(props) => {
<Text style={styles.exerciseName}>{props.item.name}</Text>
you can destructure by adding {}, like below, will simplify 'props.item.name'  to 'item.name'
renderItem={({ item })
<Text style={styles.exerciseName}>{item.name}</Text>
we now need to create a custom component to render each item, same as react, what we have works - but is not best practice
you can declare a custom component with 'function' or '=>' start with a Capital letter, be descriptive, 
function ExerciseListItem({ item }) {
  return (
    <View style={styles.exerciseContainer}>
      <Text style={styles.exerciseName}>{item.name}</Text>
      <Text style={styles.exerciseSubtitle}>
        {item.muscle.toUpperCase()} | {item.equipment.toUpperCase()}
      </Text>
    </View>
  );
}
<FlatList
        data={exercises}
        renderItem={({ item }) => <ExerciseListItem item={item} />}
      /> #will now render our custom component with all items declared and destructured in the props
moved our component to 'src / component / ExerciseListItem.jsx', fixed CSS, only need it in one place, component CSS goes with the compoonent, container with container
contentContainerStyle={{ gap: 10 }} #new property, creates boxes that look wayyyy better than padding or margin
every time you render through a flatlist, or an array with a list of items, you should always give them a key/id property, in order to cache and rerender properly
keyExtractor={(item) => item.id} #keyExtractor is an inbuilt function you can use to map keys/ids, will not work if you have duplicate Id values, must be unique
keyExtractor={(item, index) => item.name + index} #it can also take index position, and even if a name is duplicated, it will take the index as well
subValue: {
    textTransform: "capitalize",
  }, #allows us to capitalize any text with the <Text style={styles.subValue}>{item.muscle}</Text>

to add Typescript to our project, simply rename app.js to 'app.ts' and expo will detect that change and incorporate typescript in your project
next step is to use Expo Router to setup the navigation:
https://docs.expo.dev/router/introduction/
https://docs.expo.dev/router/installation/#manual-installation
Expo Router is built on top of React Navigation is the first file based navigation system for React Native Apps, it works by using a specific file structure similar to NextJS
npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar #will install expo router and all dependancies from terminal
npx expo install react-native-web react-dom #will install web dependancies
'app.json' added '"scheme": "workouts",' '"bundler": "metro"'
'package.json' changed "main": '"expo-router/entry"'
modified 'babel.config.js', nvm already added.

60:00===============================================================================================================================================================================================================================
First things first, now that we have routing, we need a homescreen, moved all of our work from starting 'App.js' to 'index.js'
created new folder src / app / 'index.js'
React Native Colors:
https://reactnative.dev/docs/colors
React Native Shadow Generator:
https://ethercreative.github.io/react-native-shadow-generator/
Created new page, src / app / 'exercise.js' to hold all the exercise details, can get to it easier through browser, 'localhost:8081/exercise' to navigate to it
import { Link } from "expo-router"; #allows us to link to other pages in our app
<Link href={'/exercise'} style={styles.exerciseName}>{item.name}</Link> #A link is similar to a text component, or <a>, requires an href={}, this will link to our newly built exercise page
<Link href={"/exercise"} asChild> #will allow us to wrap our entire container, so we can click anywhere and still go to the page
  when you wrap a container in a <Link>, ensure that the child has an onPress event
<Pressable style={styles.exerciseContainer}> #Pressable is similar to view, but can use the onPress event, and will allow us to use our wrapped <Link>
import { useLocalSearchParams } from "expo-router"; #will allow us to get details for our page
<Link href={`/${item.name}`} asChild> #will now link dynamically to our exercise.name, and will be URL encoded
created new src / app / '_layout.jsx' #will be applied to every file/screen/page - for headers and footers, and global providers
import { Slot } from "expo-router"; #will simply render the screen(of other pages)
import { Stack } from "expo-router"; #will render the page(slot) but also allow a header / with navigation
export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="Index" options={{ title: 'Exercises '}} />
    </Stack>
  );
} #will allow us to add titles, to our main page it will display 'Index', when we click an option it will display 'Exercises'
React Navigation Docs:
https://reactnavigation.org/docs/getting-started
<Stack.Screen options={{ title: exercise.name }} /> # will also display dynamic name

1:30:00=============================================================================================================================================================================================================================
Currently if the exercise has a lot of instructions, it is not scrollable, because we have not specified it, 'import { ScrollView } from 'react-native';' will allow us to scroll... through our view >.>
<ScrollView styles={styles.container}> #will allow us to scroll, but we will lose our gap
<ScrollView contentContainerStyle={styles.container}> #will give us our gap back by using the 'contentContainerStyle'
Next we will need to create a 'See More' button, which will require a state variable to track if the button is pressed: 'import { useState } from 'react;'
const [isInstructionExpanded, setIsInstructionExpanded] = useState(false); # 2 values, first is the actual value of the state, the second is a function, a setter which can update the value
<Text style={styles.instructions} numberofLines={isInstructionExpanded ? 0 : 3}> #if expanded will show '0' or all lines, if not expanded will show 3
<Text onPress={()=> setIsInstructionExpanded(!isInstructionExpanded)} style={styles.seeMore}>See More</Text> # onPress Event, will use our setter to change the expanded variable '!' = not 
to update a variable, you should always use a setter, never use the variable directly
Now we need to change the 'See More' to 'See Less' if it is expanded, you remove the static text and add a {Javascript Expression} to accomplish this based on the value of our variable, like below
{isInstructionExpanded ? 'See Less' : 'See More'} #ternary operator, if the value is true 'See Less', if false 'See More'
When we put styles in the root layout, they will be on every page and overwrite each individual pages CSS, they take priority
Tabs(displays our pages as tabs) Vs Stack(Displays our pages with navigation features - back button, swipe to navigate, etc) Vs Slot (slot displays our pages with no navigation features)
If you want shared behaviour between screens like listen for notifications, custom view, popups, etc you would do it in the root layout

Next we need to create an account on API-Ninjas:
https://api-ninjas.com/
And get the exercises from their api using stepzen GraphQL API:
https://api-ninjas.com/api/exercises
IBM Stepzen:
https://stepzen.com/
https://www.ibm.com/docs/en/stepzen
npm install -g stepzen #will install stepzen globally on our machine
Account created, we will need an admin key and API key
stepzen login #will ask us for our credentials
We are going to build a GraphQL API, combine different resources, connect it to a custom database using IBM Stepzen, 
stepzen/ibm is garbage trash - multi bilolion dollar company - I'm sorry hal, I can't do that (give me API admin name and key for stepzen), thanks ramjeet sukhdik 
I created 2 accounts, can't log in with either, connected github, rajesh must've been getting paid hourly for this one, nothing works, set up the API(attempt) 3 times, wasted hours, literally sh!t code, can't even log in to stepzen
going to need to build my own API endpoint, or create my own API call, or import exercises manually(taking multiple hours/days longer than what should be the case) - at least I didn't pay for this trash
no saaaaarrrrrrr I did not redeem, I can't log in with credentials, when I try to log in - it keeps circling me back and forth between 2 websites stepzen and ibm - I will have to build my own, non-sh!t covered code - 
will need to build an input page, with an ORM, using MongoDB+Mongoose, and figure out a way to fetch data with the API or just manually input a bunch of exercises until we can move forward(hours wasted because of above)

Instead of just following along, I now need to build an input page, read docs, connect that input page to mongoDB, set up an ORM, make an API, create a fetch, test that, input dozens of exercises, create a way to create/edit/delete
  then hook CRUD up to DB, then add new page(s) to my main app, then test that, fix CSS, post fetched data to main page, and more... at least I can reuse the create exercise functionality when I actually get back in da gym(escape)
MongoDB for React Native:
https://www.mongodb.com/docs/atlas/app-services/tutorial/react-native/
https://www.mongodb.com/docs/atlas/
https://benestudio.co/mongodb-app-services-react-native/
MongoDB React Native SDK:
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/app-services/query-mongodb/
https://github.com/realm/realm-js/tree/main/examples/rn-todo-list
React Native Docs:
https://reactnative.dev/docs/getting-started
NextJS Docs:
https://nextjs.org/docs
Use GoogleSheets for saving workouts (MVP):
https://medium.com/ibjects/simplest-approach-to-build-a-react-native-app-with-google-sheets-api-3f3f89a20079
https://www.reddit.com/r/reactnative/comments/qld6bu/using_google_sheets_as_a_db_on_react_native/
https://www.npmjs.com/package/google-spreadsheet
https://www.freecodecamp.org/news/react-and-googlesheets/
https://sheet.best/
MongoDB docs recomend using SDK with React Native, mongoose is for react I guess? I want it to store data when offline and upload when it has a connection to MongoDB, backing up my workouts, 
  Maybe we can store exercises/workouts locally and create an upload API to the DB? how would that work from browser to iOs to android? How would that work if we host it on vercel for free? does vercel store data?
  I'm going to be primarily using it from my phone at the gym, maybe we don't need to store locally and can just depend on a connection? I've never used SDK, need to do alot of reading,
  It would be so much easier if we could just get the functionality of an excell spreadsheet where each row is a day, and each column is a workout exercise + reps , can we connect google sheets somehow? that would work on all devices?
  Or maybe make the exercises use MongoDB, because we already created the Create page on the app, just need to connect API to download the exercise list to use anywhere from any device
    - since we will be working out in Japan we should have internet at all times, and we can use googlesheets to get a MVP out - I'll be the only one using it - don't need authentication(nice to have) or scalability
    Maybe save locally on a 'workout sesh page' and then have an 'upload workout' that stores the workout to google sheets all at once, what about when I want to just do 30 situps/pushups real quick? keep page open?
  need to do alot of reading to figure out the easiest way to get this done, I like saving it as a google sheet, that I would have access to on any device, without querying a DB
  save exercises locally, using 'exercises.json', it should update everytime we open the app, can still use our create exercise page, save each new exercise as a json object
ERROR: We can not write a JSON file if we we are hosting on Vercel(serverless), we NEED to save our exercises on MongoDB
https://github.com/orgs/vercel/discussions/456
Maybe cache data locally until we are done workout, and upload as one line in google sheets 'Date / #-Exercise1 / #-Exercise2 / ...' that way cache can save any calisthenics we do during the day even if we close app

Installing Realm/MongoDB Atlas SDK for React Native:
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/
https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/install/#std-label-react-native-install
npm install realm #from root directory in terminal, will install realm
Install Hermes:
https://reactnative.dev/docs/hermes
Convert to Typescript(Optional):
https://reactnative.dev/docs/typescript#adding-typescript-to-an-existing-project
npm install @realm/react #installs the @realm/react Library @realm/react is an npm package that streamlines common SDK operations like querying, writing to a database, and listening for object change notifications. 
  This reduces boilerplate code, like creating your own listeners and state management.
npm start #Runs app
import Realm from "realm"; #import realm

2:00:00=================================================================================================================================================================================================================================
Going back to tut, finish app, see all features, will add DB after, have all docs I need to fix, will just need to manually input for testing through MongoDB, sucks but works, will be fully functional because I actually want to use
stepzen import curl <api URL> #if rapminjderp from stepzen/ibm didn't screw me through poo code/login authenticASean shite, this is what I would need to do to use stepzen/graphQL - one line of code
  at least the guy in tut is struggling as much as I was, SeanDenFreud, it's not just me. Except he actually got to the API key stage, video was sponsored by stepzen - smells カレーfishy - no sane man would willingly subject themselves
after succesful import, it creates a folder 'curl' with 2 files 'index.graphql' with schema and 'stepzen.config' with API endpoint,
  everything is considered a type RootEntry {key: string} and it created a query with API ninja key in an easily accessed public file, nice. 


































