Start : 2024October06
End :
Starting a new notes section for all my prompts and ideas, starting fresh, trying to use my daily API calls to build it brick by brick, page by page, hopefully it's easier to get this mongodb working on nextJS
I still need to set up MongoDB, but got everything else installed - Will use 'Mongoose' 'MongoDB' and 'GraphQL' - still need to think about how I want the schema/page layout set up - starting tommorrow

Folder Layout: =============================================================================================================================================================
/src
  /components
  /pages
    /api
  /graphql
    /resolvers
    /schemas
  /models
  /utils
/public
/styles

GraphQL Schema: =============================================================================================================================================================
type Exercise {
  id: ID!
  name: String!
  description: String
  muscleGroup: String
  equipment: String
}

type WorkoutExercise {
  exercise: Exercise!
  sets: Int
  reps: Int
  weight: Float
}

type Workout {
  id: ID!
  name: String!
  date: String!
  exercises: [WorkoutExercise!]!
}

type Query {
  exercises: [Exercise!]!
  workouts: [Workout!]!
  currentWorkout: Workout
}

type Mutation {
  createExercise(name: String!, description: String, muscleGroup: String, equipment: String): Exercise!
  createWorkout(name: String!, exercises: [WorkoutExerciseInput!]!): Workout!
  startWorkout(workoutId: ID!): Workout!
  completeWorkout(workoutId: ID!): Workout!
}

input WorkoutExerciseInput {
  exerciseId: ID!
  sets: Int!
  reps: Int!
  weight: Float
}

MongoDB Setup: You'll need to set up MongoDB models corresponding to your GraphQL types. Here's an example for the Exercise model: ===============================================================
import mongoose from 'mongoose';

const ExerciseSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: String,
  muscleGroup: String,
  equipment: String,
});

export default mongoose.models.Exercise || mongoose.model('Exercise', ExerciseSchema);

GraphQL Setup: For GraphQL with Apollo, you'll need to set up an Apollo Server. In Next.js, you can do this in an API route: =======================================================================
import { ApolloServer } from 'apollo-server-micro';
import { typeDefs } from '../../graphql/schemas';
import { resolvers } from '../../graphql/resolvers';
import { createContext } from '../../graphql/context';

const apolloServer = new ApolloServer({ 
  typeDefs, 
  resolvers,
  context: createContext,
});

export const config = {
  api: {
    bodyParser: false,
  },
};

export default apolloServer.createHandler({ path: '/api/graphql' });

Best Practices for GraphQL Setup: Use DataLoader for efficient database querying. Implement proper error handling and validation. Use Apollo Client on the frontend for state management and caching.
  Consider implementing authentication and authorization.
import { Exercise, Workout } from '../../models';

export const resolvers = {
  Query: {
    exercises: async () => await Exercise.find(),
    workouts: async () => await Workout.find().sort('-date'),
    currentWorkout: async () => await Workout.findOne({ status: 'in-progress' }),
  },
  Mutation: {
    createExercise: async (_, args) => {
      const exercise = new Exercise(args);
      await exercise.save();
      return exercise;
    },
    createWorkout: async (_, { name, exercises }) => {
      const workout = new Workout({ name, exercises, date: new Date() });
      await workout.save();
      return workout;
    },
    // Implement other mutations...
  },
};

Obsidian Integration:
To automatically sync your workouts with Obsidian, you could:
a. Set up a webhook in your app that triggers when a workout is completed.
b. This webhook could generate a Markdown file with the workout details.
c. Use a service like Dropbox or Google Drive to sync this file to your PC.
d. Configure Obsidian to watch the synced folder.
Alternatively, you could build a simple export feature that generates a Markdown file for manual import into Obsidian.

CosiderASeans : Thinking about the page layout/schema tonight, before I start doing the heavy lifting - measure twice, cut once and all that =======================================================
Schema considerations:
- User profile (name, email, password, etc.)
- Workout sessions (date, duration, type)
- Exercises (name, sets, reps, weight)
- Progress tracking (measurements, personal records)
- Goals and achievements

Page layout considerations:
- Dashboard (overview of recent workouts, progress, upcoming goals)
- Workout logger (interface for recording new workouts)
- Exercise library (list of exercises with descriptions and proper form)
- Progress tracker (graphs and stats showing improvement over time)
- Profile page (user information and settings)
- Social features (if you want users to be able to share workouts or compete)

The Plan : =========================================================================================================================================================================================
I want to input the data on my phone - either automatically update my PC obsidian and save the workout to MongoDB - to accomplish this, I can either create a version that is copy and pastable in markdown
  or email it to my PC - I don't neccesarily want to create a login screen, because I'm putting this app on my resume/cv and I need them to be able to see it, maybe just make the account sign up process super easy?
  like just an email and a PW - I should be the only one using this app - so mongodb doesn't need to worry about scaling - I think for future seans sake - authenticASean is gonna be needed, might as well start
  with it - 
So I will need 8? screens - Login + Signup + Current Workout(Save to mongoDB+Email button on bottom) + Past Workouts View List + Past workout view 1 + Exercise(show details) + Add a new exercise 
For Each Exercise I will need - Date - Reps - Sets(maybe just add a new exercise everytime) - Weight - Time - each time it is saved, remember the previous time I did it, for example :
  Every time I do curls @ 30 lbs for 15 reps - the next time I select 'Bicep Curls' it should remember what I did last time, and I save myself like 10 clicks and just select 'Bicep Curls -> Add to workout'
For Each Exercise Input (add an exercise for workouts) - ID - Description(how to perform) - Muscle Group - Equipment - Maybe add a stock image(future sean can add an animated gif showing how its done later)
I will also need a search feature for exercises - either by exercise name or muscle group or equipment
I will also need a component with routing for the email/mongoDB workout - in order to get it in obsidian - I don't want to do MongoDB queries for what was my bench at 4 months ago - easier on obsidian
Exercises list will just be reverse chronological - when I click it the ID will be the date - what if I workout twice? will it clash? like run in the morning, weights at night - or just throw in 3 sets of abs for w/e




























